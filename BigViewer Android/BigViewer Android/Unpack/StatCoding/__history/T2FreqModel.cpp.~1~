//---------------------------------------------------------------------------


#pragma hdrstop

#include <stdafx.h>

#include "T2FreqModel.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

T2FreqModel::T2FreqModel(_TAnyCoder * _Coder):
	Coder(_Coder)
{
  Clear();
}

T2FreqModel::T2FreqModel()
{
  Clear();
}

T2FreqModel::~T2FreqModel()
{

}

//////////////////////////////////////////////////////////////////////
// Internal usage methods
//////////////////////////////////////////////////////////////////////

uint16 T2FreqModel::GetCF(uint16 val)
{
  return val ? Freq[0] : 0;
}

void T2FreqModel::UpdateModel(uint16 val)
{
	Freq[val] ++;

  Total ++;
  if (Total < 16384)
  	return;

 	Freq[0] = (Freq[0] + 1) >> 1;
 	Freq[1] = (Freq[1] + 1) >> 1;
  Total = Freq[0] + Freq[1];
}

//////////////////////////////////////////////////////////////////////
// External usage methods
//////////////////////////////////////////////////////////////////////

void T2FreqModel::Clear(void)
{
	Freq[0] = Freq[1] =  1;
  Total = 2;
}

void T2FreqModel::Encode(uint16 val)
{
  val &= 0x01;
	Coder->Encode(GetCF(val), Freq[val], Total);
  UpdateModel(val);
}

uint16 T2FreqModel::Decode(void)
{
  int val;

	uint16 cf = (uint16)(Coder->GetFreq(Total));

  val = (cf >= Freq[0]) ? 1 : 0;

  Coder->Decode(GetCF(val), Freq[val], Total);
  UpdateModel(val);
  return val ? 0xFF : 00;
}

