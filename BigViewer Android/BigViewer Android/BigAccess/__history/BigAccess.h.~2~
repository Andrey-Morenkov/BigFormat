//Функции библиотеки BigAccess.dll
//Библиотека подключается включением BigAccess.lib в проект
//Для работы необходимо наличие BigAccess.dll и unpack.dll

//#define SPEC extern "C" __declspec(dllimport)

//------------------------------------------------------------------------------------
int InitBigAccess(int MaxCacheSize);
//Инициализирует систему BigAccess.
//
//	MaxCacheSize - максимально допустимый размер кеша (в байтах).

int OpenSource(char *SourceName, int *_Handle);
//Открывает источник (BIG-файл или INI-файл). Включает все слои.
//
//	SourceName - имя источника с указанием полного пути (указатель на
//		0-terminated ASCII строку).
//	_Handle - указатель на переменную, в которую будет записан дескриптор
//		открытого источника.

int CloseSource(int Handle);
//Закрывает открытый ранее функцией OpenSource источник.
//
//	Handle - дескриптор закрываемого источника.

int GetSourceSizes(int Handle, unsigned int *_BigPixelWidth, unsigned int *_BigPixelHeight);
//Возвращает габариты графического образа источника в пикселах с учетом текущего
//масштаба (в относительных координатах).
//
//	Handle - дескриптор источника.
//	_BigPixelWidth - указатель на переменную, в которую будет записан горизонтальный
//		размер графического образа источника (в относительных координатах).
//	_BigPixelHeight - указатель на переменную, в которую будет записан вертикальный
//		размер графического образа источника (в относительных координатах).

int SetZoomOut(int Handle, int _ZoomOut);
//Устанавливает текущий масштаб для источника.
//
//	Handle - дескриптор источника.
//	ZoomOut - коэффициент пространственного сжатия (масштаб).
//		Возможные значения: 1, 2, 4, 8, -2(увеличение).

int GetZoomOut(int Handle, int *_ZoomOut);
//Возвращает текущий масштаб для источника.
//
//	Handle - дескриптор источника.
//	_ZoomOut - указатель на переменную, в которую будет записан текущий коэффициент
//		пространственного сжатия (масштаб).
//		Возможные значения: 1, 2, 4, 8, -2(увеличение).

int GetImage(int Handle, int X0, int Y0, BITMAP *Bitmap);
// ! Устаревшая, рекомендуется использовать GetImage2
//Переносит определенный участок графического образа источника в заданный буфер
//в формате Windows Bitmap.
//
//	Handle - дескриптор источника.
//	X0 - абсцисса левого верхнего угла участка графического образа источника
//		(в пикселах, начиная с 0, в относительных координатах).
//	Y0 - ордината левого верхнего угла участка графического образа источника
//		(в пикселах, начиная с 0, в относительных координатах).
//	Bitmap - ссылка на заполненную стуктуру описания приемника участка графического
//		образа. Структура BITMAP определена в заголовочном файле wingdi.h следующим
//		образом:
//
//		typedef struct tagBITMAP {
//   			LONG   bmType;		// поле не обязательно для заполнения
//   			LONG   bmWidth; 	// горизонтальный размер участка
//						// (в абсолютных координатах)
//   			LONG   bmHeight; 	// вертикальный размер участка
//						// (в абсолютных координатах)
//   			LONG   bmWidthBytes; 	// определяет количество байт
//						// на строку изображения (выравнивание
//						// до кратности 4)
//   			WORD   bmPlanes;	// поле не обязательно для заполнения
//   			WORD   bmBitsPixel;	// поле не обязательно для заполнения
//   			LPVOID bmBits; 		// указатель на заполняемый буфер,
//						// размер которого должен быть не
//						// менее bmWidthBytes*bmHeight байт
//		} BITMAP;

int GetImage2(int Handle, int X0, int Y0, BITMAP *Bitmap);
//Новая версия, рекомендуется использовать вместо GetImage
//Параметры те же, но
//
//	Поле Bitmap->bmBitsPixel должно быть установлено перед вызовом
//	  8 для 256 цветов,
//		24 для 16 млн цветов
//
//	В случае, если Bitmap->bmBitsPixel = 24, буфер Bitmap->bmBits должен быть
//		выделен из расчета 3 байта на пиксел, с выравниванием размера строки до кратного
//		4 байт.


int GetStdImage(int Handle, int Row, int Col, char *AData);
//Предоставляет графический образ участка источника. Размеры участка 128x128 пикселей,
//положение левого верхнего угла участка (Col*128, Row*128).
//
//	Handle - дескриптор источника.
//	Row - определяет ординату левого верхнего угла участка графического образа источника
//		(в пикселах, начиная с 0, в абсолютных координатах): Y = Row*128.
//	Col - определяет абсциссу левого верхнего угла участка графического образа источника
//		(в пикселах, начиная с 0, в абсолютных координатах): X = Col*128.
//	AData - указывает на выделенную обрасть памяти - приемника дампа графического образа.
//		Размер выделенной области должен быть 16384 байт, если источник не полноцветный,
//		и 16384*3 байт, если полноцветный. Если источник полноцветный, то интенсивности
//		компонент цвета пиксела следуют в порядке: синий, зеленый, красный.

HPALETTE CreatePalette332(void);
//Создает и возвращает handle палитры 3-3-2.

HPALETTE CreateGrayscalePalette(void);
//Создает и возвращает handle палитры с 256 градациями серого.

int GetPaletteData(int Handle, unsigned char *ColorTable);
//Создает данные палитры для конкретного источника. Эта функция, в
//зависимости от настроек в idx-файле, создает 3-3-2, Grayscale или специфичную
//палитру.
//
//	Handle - дескриптор источника.
//	ColorTable - массив из 256 элементов по 4 байта (для R, G, B, Z компонент
//		палитры. Если источник полноцветный, то создается палитра 3-3-2.

int GetPalette(int Handle, HPALETTE *HPalette);
//Создает handle палитры для конкретного источника. Эта функция, в
//зависимости от настроек в idx-файле, вызывает либо CreatePalette332, либо
//CreateGrayscalePalette.
//
//	Handle - дескриптор источника.
//	HPalette - указатель на переменную, в которую будет занесен handle
//		созданной палитры. Если источник полноцветный, то создается палитра 3-3-2.

int GetColorStruct(int Handle, unsigned char *Type);
//Возвращает тип цветовой модели источника.
//
//	Handle - дескриптор источника.
//	Type - указатель на переменную, в которую будет занесен тип
//		цветовой модели:
//		0x01 - 8 bpp, палитра 3-3-2,
//		0x02 - 8 bpp, палитра - 256 градаций серого,
//		0x03 - 24 bpp, true color,
//    0x04 - 8bpp, произвольная палитра
//  (используйте GetPalette для всех случаев)

int GetColorsNum(int Handle, int *ColorsNum);
//Возвращает число цветов в палитре (2^24 для truecolor) 
                                                                                       
int GetBaseCoords(int Handle, int X, int Y, double *BaseX, double *BaseY);
//Переводит относительные координаты в пикселах в координаты базы.
//
//	Handle - дескриптор источника.
//	X - абсцисса точки в пикселах (отсчет с нуля от левого края в относит. коорд.).
//	Y - ордината точки в пикселах (отсчет с нуля от верхнего края в относит. коорд.).
//	BaseX - указатель на переменную, в которую будет занесена абсцисса
//		точки в координатах базы.
//	BaseY - указатель на переменную, в которую будет занесена ордината
//		точки в координатах базы.

int GetPixelCoords(int Handle, int *X, int *Y, double BaseX, double BaseY);
//Переводит координаты базы в координаты в пикселах.
//
//	Handle - дескриптор источника.
//	X - указатель на переменную, в которую будет занесена абсцисса
//		точки в пикселах (отсчет с нуля от левого края в относит. коорд.).
//	Y - указатель на переменную, в которую будет занесена ордината
//		точки в пикселах (отсчет с нуля от верхнего края в относит. коорд.).
//	BaseX - абсцисса точки в координатах базы.
//	BaseY - ордината точки в координатах базы.

int GetSmallMapSizes(int Handle, unsigned int *_Width, unsigned int *_Height);
//Возвращает габариты наименьшего планшета источника.
//
//	Handle - дескриптор источника.
//	_Width - указатель на переменную, в которую будет записан горизонтальный
//		размер наименьшего планшета (в пикселах).
//	_Height - указатель на переменную, в которую будет записан вертикальный
//		размер наименьшего планшета (в пикселах).

int GetLargeMapSizes(int Handle, unsigned int *_Width, unsigned int *_Height);
//Возвращает габариты наибольшего планшета источника.
//
//	Handle - дескриптор источника.
//	_Width - указатель на переменную, в которую будет записан горизонтальный
//		размер наибольшего планшета (в пикселах).
//	_Height - указатель на переменную, в которую будет записан вертикальный
//		размер наибольшего планшета (в пикселах).

int GetSmallMap(int Handle, BITMAP *Bitmap);
//Переносит графический образ наименьшего планшета в заданный буфер
//в формате Windows Bitmap.
//
//	Handle - дескриптор источника.
//	Bitmap - ссылка на заполненную стуктуру описания приемника графического
//		образа. Структура BITMAP определена в заголовочном файле
//		wingdi.h (см. функцию GetImage):

int GetLargeMap(int Handle, BITMAP *Bitmap);
//Переносит графический образ наибольшего планшета в заданный буфер
//в формате Windows Bitmap.
//
//	Handle - дескриптор источника.
//	Bitmap - ссылка на заполненную стуктуру описания приемника графического
//		образа. Структура BITMAP определена в заголовочном файле
//		wingdi.h (см. функцию GetImage):

int GetLargeMapBlock(int Handle, int Row, int Col, char *PackedImage);
//Осуществляет поблочный низкоуровневый доступ к наибольшему планшету. Размер блоков
//128x128 пикселей.
//
//	Handle - дескриптор источника.
//	Row - номер строки блоков (отсчет от нуля).
//	Col - номер столбца блоков (отсчет от нуля).
//	PackedImage - указывает на выделенную область памяти, куда будет занесен
//		упакованный блок. Размер упакованного блока можно получить с помощью
//		функции GetLargeMapBlockSize. Распаковку можно осуществить с помощью
//		функции UnpackBlock.

int GetLargeMapBlockSize(int Handle, int Row, int Col, int *PackedSize);
//Получает размер упакованного блока изображения наибольшего планшета.
//
//	Handle - дескриптор источника.
//	Row - номер строки блоков (отсчет от нуля).
//	Col - номер столбца блоков (отсчет от нуля).
//	PackedSize - указатель на переменную, куда будет занесен размер соответствующего
//		упакованного блока изображения.

int GetLayersList(int Handle, int *_LayerCount, char *LayerNames);
//Возвращает количество слоев и название каждого слоя в источнике.
//
//	Handle - дескриптор источника.
//	_LayerCount - указатель на переменную, в которую будет записано количество слоев.
//		Если в источнике присутствует только основной слой, то в *_LayerCount будет
//		записан ноль.
//	LayerNames - массив из 15*15=225 элементов типа char (создается пользователем).
//		В случае успешного завершения LayerNames+i*15 - указатель на
//		NULL-terminated ASCII строку с названием слоя номер i (нумерация с нуля).

int GetLayersPriority(int Handle, int *_Priorities);
//Возвращает информацию о приоритетах слоев.
//
//	Handle - дескриптор источника.
//	_Priorities - Массив элементов типа int, в которые будут записаны приоритеты
//		соответствующих слоев.

int GetLayerMixInfo(int Handle, int LayerIndex, char *Style, char *UnicColor);
//Возвращает информацию о слое, которая используется при микшировании.
//
//	Handle - дескриптор источника.
//	LayerIndex - номер слоя, начиная с нуля.
//	Style - указатель на переменную, в которую будет записан
//		первый параметр микширования.
//	UnicColor - указатель на переменную, в которую будет записан
//		второй параметр микширования.

int MixTwoLayers(unsigned char *Dest, unsigned char *Src, char Style, char UnicColor);
//Микширует два слоя, представленных в виде матриц 128x128 цветовых индексов.
//
//	Dest - массив 16384 байт, представляет собой изображение первого слоя (128x128),
//		на которое наложится изображение второго слоя (Src). Каждый байт определяет
//		один пиксель - индекс в таблице цветов (палитре).
//	Src - массив 16384 байт, представляет собой изображение второго слоя (128x128),
//		которое наложится на изображение первого слоя (Dest). Каждый байт определяет
//		один пиксель - индекс в таблице цветов (палитре).
//	Style - первый параметр микширования, определенный для второго слоя.
//	UnicColor - второй параметр микширования, определенный тоже для второго слоя.

int SetLayers(int Handle, unsigned int Layers);
//Устанавливает набор отображаемых слоев для источника.
//
//	Handle - дескриптор источника.
//	Layers - битовый набор отображаемых слоев. Бит номер i соответствует слою номер
//		i (нумерация с нуля). Значения битов:
//			0 - слой не отображается;
//			1 - слой отображается.
//		Биты, соответствующие несуществующим слоям, должны быть сброшены. Например
//		всего 10 слоев, нужно включить 0, 1, 7, 9 слои, а остальные выключить, тогда
//		Layers = 00000000 00000000 00000010 10000011.
//		Если
//		Layers = 00000000 00000000 00000110 10000011, то функция возвратит код
//		ошибки rcLayerNotPresent.

int GetLayers(int Handle, unsigned int *Layers);
//Возвращает набор отображаемых слоев для источника.
//
//	Handle - дескриптор источника.
//	Layers - указатель на переменную, в которую будет записан битовый набор
//		отображаемых слоев (в формате SetLayers).

int UnpackBlock(char *Dst, char *Src, int PackedSize);
//Осуществляет распаковку блока изображения.
//
//	Dst - указывает на выделенную область памяти, куда будет занесен распакованный
//		блок. Размер области - 16384 байта.
//	Src - указывает область памяти, где содержится упакованный блок. Размер области -
//		PackedSize байт.
//	PackedSize - размер упакованного блока.


//------------------------------------------------------------------------------------

//Коды возвратов функций.

const int
	rcOk = 0,			// успешное завершение работы функции
	rcSrcAlreadyOpened = -101,	// попытка открыть источник, 
					// не закрыв ранее открытый
					// (в данной версии библиотеки не используется)
	rcSrcAlreadyClosed = -102,	// попытка работы с неоткрытым источником
	rcCantOpenIdxFile = -103,	// невозможно открыть указанный idx-файл
	rcCantOpenBigFile = -104,	// невозможно открыть указанный big-файл
	rcInvalidIniFile = -105,	// ini-файл поврежден
	rcMemoryError = -106,		// ошибка в работе с памятью
	rcCantIncludeUnpackDll = -107,	// не удается подключить unpack.dll
	rcInvalidUnpackDll = -108,	// в unpack.dll не обнаружена функция decode
	rcDiskError = -109,		// ошибка в файле
	rcUnpackError = -110,		// ошибка декодирования растра
	rcZoomNotImplemented = -111,	// неверный параметр ZoomOut
	rcIniNotOpened = -112,		// попытка воспользоваться функцией
					// GetBaseCoords или GetPixelCoords,
					// не открыв соответствующий ini-файл
	rcNoMapPresent = -113,		// возвращается функциями доступа к
					// к планшетам, если открытый источник 
					// не содержит планшетов
	rcLayerNotPresent = -114,	// попытка включить несуществующий слой
	rcSystemAlreadyInited = -115,	// попытка многократной инициализации системы
	rcSystemNotInited = -116,	// попытка работы в неинициализированной системе
	rcTooManyOpenedSources = -117,	// попытка превысить допустимое количество 
					// одновременно открытых источников (в данной 
					// версии - 50)
	rcFatalError = -118,		// другие ошибки
	rcBppNotImplemented = -119,	// данный формат представления пикселов не 
					// поддерживается
	rcInvalidBpp = -120,		// idx-файл поврежден
	rcNoPalette = -121;			// попытка получить палиру источника, если 
					// таковая не используется (например в режиме True Color)

